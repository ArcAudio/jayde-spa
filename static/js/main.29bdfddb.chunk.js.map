{"version":3,"sources":["headstar10.png","Home.js","pic1.jpg","pic2.jpg","pic3.jpg","pic4.jpg","pic5.jpg","pic6.jpg","pic7.jpg","pic8.jpg","Artworks.js","Content.js","Contact.js","eyeball.png","ii3.png","eyeballit4.jpg","ii2.png","ii1.png","head.png","birds1/bgfill.png","birds1/crowpic10.png","birds1/foreground0.png","birds1/bricktexture0.png","ThreeTest.js","Main.js","index.js"],"names":["Home","src","eye","alt","className","Component","Artworks","ph1","ph2","ph3","ph4","ph5","ph6","ph7","ph8","Content","props","Container","fluid","Row","Col","md","children","Contact","handleChange","event","target","value","type","checked","name","setState","handleSubmit","preventDefault","console","log","disabled","Axios","post","state","then","res","data","success","emailSent","catch","err","email","message","Form","onSubmit","this","Group","Label","htmlFor","Control","id","onChange","as","rows","Button","variant","React","style","height","ThreeTest","sceneSetup","width","el","clientWidth","clientHeight","scene","THREE","camera","position","z","timeNow","Date","now","controls","OrbitControls","renderer","setSize","appendChild","domElement","addCustomSceneObjects","bricktex","load","bricktexture","map","background","birdtex1","birdbg","geometry1","birdtex2","birdfg","geometry2","birdtex3","birds","geometry3","headtex1","head1","geometry4","headtex2","headstar","geometry5","materialb1","depthTest","transparent","materialb2","materialb3","materialh1","materialh2","pln1","pln2","pln3","pln4","pln5","x","Array","fill","forEach","addstar","addstar2","add","texture","img1","sizeRand","randFloatSpread","material","size","opacity","geometry","vertices","i","Math","random","y","push","setAttribute","star","img3","addstar3","img4","addstar4","img5","startAnimationLoop","time2","time","abs","lookAt","length","object","rotation","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref","Letter","letterStyle","padding","margin","backgroundColor","bgcolor","color","display","fontFamily","fontSize","textAlign","Main","to","exact","path","component","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.29bdfddb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/headstar10.fcbbe4c2.png\";","import React, { Component } from \"react\";\nimport eye from './headstar10.png';\nimport Image from 'react-image-resizer';\nimport \"./index.css\"; \n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>HELLO</h2>\n        <p>Cras facilisis urna ornare ex volutpat, et\n        convallis erat elementum. Ut aliquam, ipsum vitae\n        gravida suscipit, metus dui bibendum est, eget rhoncus nibh\n        metus nec massa. Maecenas hendrerit laoreet augue\n        nec molestie. Cum sociis natoque penatibus et magnis\n        dis parturient montes, nascetur ridiculus mus.</p>\n \n        <p>Duis a turpis sed lacus dapibus elementum sed eu lectus.</p>\n        <img src = {eye} alt=\"eye\" className=\"container-div\"\n                //   height={ 200 }\n                //   width={ 200 }\n        />\n      </div>\n    );\n  }\n}\n \nexport default Home;","export default __webpack_public_path__ + \"static/media/pic1.26366610.jpg\";","export default __webpack_public_path__ + \"static/media/pic2.44c902bf.jpg\";","export default __webpack_public_path__ + \"static/media/pic3.53de3313.jpg\";","export default __webpack_public_path__ + \"static/media/pic4.a3c2de91.jpg\";","export default __webpack_public_path__ + \"static/media/pic5.c73ab99a.jpg\";","export default __webpack_public_path__ + \"static/media/pic6.9140d90a.jpg\";","export default __webpack_public_path__ + \"static/media/pic7.338ffe00.jpg\";","export default __webpack_public_path__ + \"static/media/pic8.bb33d266.jpg\";","import React, { Component } from \"react\";\nimport ph1 from './pic1.jpg';\nimport ph2 from './pic2.jpg';\nimport ph3 from './pic3.jpg';\nimport ph4 from './pic4.jpg';\nimport ph5 from './pic5.jpg';\nimport ph6 from './pic6.jpg';\nimport ph7 from './pic7.jpg';\nimport ph8 from './pic8.jpg';\n\nclass Artworks extends Component {\n  render() {\n    return (\n      <div>\n        <h2>ArtWorks</h2>\n        <p>My name is Jayde Marie Bell and I create large scale murals, these are just some of my previous works:</p>\n        <ol>\n          <li>Picture1</li>\n          <img src = {ph1}></img>\n          <li>Picture2</li>\n          <img src = {ph2}></img>\n          <li>Picture3</li>\n          <img src = {ph3}></img>\n          <li>Picture4</li>\n          <img src = {ph4}></img>\n          <li>Picture5</li>\n          <img src = {ph5}></img>\n          <li>Picture6</li>\n          <img src = {ph6}></img>\n          <li>Picture7</li>\n          <img src = {ph7}></img>\n          <li>Picture8</li>\n          <img src = {ph8}></img>\n          <li>Etc</li>\n        </ol>\n      </div>\n    );\n  }\n}\n \nexport default Artworks;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nfunction Content(props) {\n\n    return(\n        <Container fluid={true}>\n            <Row className=\"justify-content-center\">\n                <Col md={8}>\n                    {props.children}\n                </Col>\n            </Row>\n        </Container>\n    );\n\n}\n\nexport default Content;","import React, { Component } from \"react\";\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport Content from './Content';\nimport Axios from 'axios';\n \nclass Contact extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            email: '',\n            message: '',\n            disabled: false,\n            emailSent: null,\n        }\n    }\n\n\n    handleChange = (event) => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? target.checked : target.value;\n        const name = target.name;\n\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n\n        console.log(event.target);\n\n        this.setState({\n            disabled: true\n        });\n\n        Axios.post('http://localhost:3030/api/email', this.state)\n            .then(res => {\n                if(res.data.success) {\n                    this.setState({\n                        disabled: false,\n                        emailSent: true\n                    });\n                } else {\n                    this.setState({\n                        disabled: false,\n                        emailSent: false\n                    });\n                }\n            })\n            .catch(err => {\n                console.log(err);\n\n                this.setState({\n                    disabled: false,\n                    emailSent: false\n                });\n            })\n\n    }\n\n\n    render() {\n        return(\n            <div>\n                {/* <Hero title={this.props.title} /> */}\n\n                <Content>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group>\n                            <Form.Label htmlFor=\"full-name\">Full Name</Form.Label>\n                            <Form.Control id=\"full-name\" name=\"name\" type=\"text\" value={this.state.name} onChange={this.handleChange} />\n                        </Form.Group>\n\n\n                        <Form.Group>\n                            <Form.Label htmlFor=\"email\">Email</Form.Label>\n                            <Form.Control id=\"email\" name=\"email\" type=\"email\" value={this.state.email} onChange={this.handleChange} />\n                        </Form.Group>\n\n\n                        <Form.Group>\n                            <Form.Label htmlFor=\"message\">Message</Form.Label>\n                            <Form.Control id=\"message\" name=\"message\" as=\"textarea\"rows=\"3\" value={this.state.message} onChange={this.handleChange} />\n                        </Form.Group>\n\n\n                        <Button className=\"d-inline-block\" variant=\"primary\" type=\"submit\" disabled={this.state.disabled}>\n                            Send\n                        </Button>\n\n\n                        {this.state.emailSent === true && <p className=\"d-inline success-msg\">Email Sent</p>}\n                        {this.state.emailSent === false && <p className=\"d-inline err-msg\">Email Not Sent</p>}\n                    </Form>\n                </Content>\n            </div>\n        );\n    }\n\n}\n \nexport default Contact;","export default __webpack_public_path__ + \"static/media/eyeball.b62f76e1.png\";","export default __webpack_public_path__ + \"static/media/ii3.324fc83f.png\";","export default __webpack_public_path__ + \"static/media/eyeballit4.f82165cd.jpg\";","export default __webpack_public_path__ + \"static/media/ii2.36f14ff0.png\";","export default __webpack_public_path__ + \"static/media/ii1.7f307da2.png\";","export default __webpack_public_path__ + \"static/media/head.449bc456.png\";","export default __webpack_public_path__ + \"static/media/bgfill.321cace6.png\";","export default __webpack_public_path__ + \"static/media/crowpic10.a3187bc1.png\";","export default __webpack_public_path__ + \"static/media/foreground0.b36c48a4.png\";","export default __webpack_public_path__ + \"static/media/bricktexture0.3306dde5.png\";","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { MathUtils, TetrahedronGeometry } from 'three';\nimport img1 from './eyeball.png';\nimport img2 from './eyeballit4.jpg';\nimport img3 from './ii3.png';\nimport img4 from './ii2.png';\nimport img5 from './ii1.png';\nimport head1 from './head.png';\nimport headstar from './headstar10.png';\n\nimport birdbg from './birds1/bgfill.png';\nimport birds from './birds1/crowpic10.png';\nimport birdfg from './birds1/foreground0.png';\nimport bricktexture from './birds1/bricktexture0.png';\n\nconst style = {\n    height: 720 // we can control scene size by setting container dimensions\n  };\n\nclass ThreeTest extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addCustomSceneObjects();\n        this.startAnimationLoop();\n        window.addEventListener(\"resize\", this.handleWindowResize);\n      }\n    \n      componentWillUnmount() {\n        window.removeEventListener(\"resize\", this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n      }\n    \n      // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n      // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n      sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.el.clientWidth;\n        const height = this.el.clientHeight;\n    \n        this.scene = new THREE.Scene();\n        this.camera = new THREE.PerspectiveCamera(\n          75, // fov = field of view\n          width / height, // aspect ratio\n          0.1, // near plane\n          1000 // far plane\n        );\n        this.camera.position.z = 45; // is used here to set some distance from a cube that is located at z = 0\n        this.timeNow = Date.now();\n    \n        // OrbitControls allow a camera to orbit around the object\n        // https://threejs.org/docs/#examples/controls/OrbitControls\n        this.controls = new OrbitControls(this.camera, this.el);\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(width, height);\n        this.el.appendChild(this.renderer.domElement); // mount using React ref\n      };\n    \n      // onPointerMove =() => {\n    \n      //   if ( event.isPrimary === false ) return;\n    \n      //   mouseX = this.el.clientX;\n      //   mouseY = this.el.clientHeight;\n    \n      // };\n    \n      // Here should come custom code.\n      // Code below is taken from Three.js BoxGeometry example\n      // https://threejs.org/docs/#api/en/geometries/BoxGeometry\n      addCustomSceneObjects = () => {\n    \n      const bricktex = new THREE.TextureLoader().load(bricktexture);\n      const materialbg = new THREE.MeshBasicMaterial({map:bricktex})\n    \n       //this.scene.background = new THREE.Color( 0x131F3F );\n       this.scene.background = bricktex;\n       //this.scene.fog = new THREE.FogExp2( 0xffffff, 0.0008 );\n       const birdtex1 = new THREE.TextureLoader().load(birdbg);\n       const geometry1 = new THREE.PlaneGeometry(45,45,4,4)\n    \n       const birdtex2 = new THREE.TextureLoader().load(birdfg);\n       const geometry2 = new THREE.PlaneGeometry(45,45,4,4)\n    \n       const birdtex3 = new THREE.TextureLoader().load(birds);\n       const geometry3 = new THREE.PlaneGeometry(45,45,4,4)\n    \n       const headtex1 = new THREE.TextureLoader().load(head1);\n       const geometry4 = new THREE.PlaneGeometry(45,45,4,4)\n    \n       const headtex2 = new THREE.TextureLoader().load(headstar);\n       const geometry5 = new THREE.PlaneGeometry(45,45,4,4)\n    \n       //const geometry = new THREE.TorusGeometry(10,3,16,100)\n       const materialb1 = new THREE.MeshBasicMaterial({map:birdtex1, depthTest: false, transparent: true});\n       const materialb2 = new THREE.MeshBasicMaterial({map:birdtex2, depthTest: false, transparent: true});\n       const materialb3 = new THREE.MeshBasicMaterial({map:birdtex3, depthTest: false, transparent: true});\n    \n       const materialh1 = new THREE.MeshBasicMaterial({map:headtex1, depthTest: false, transparent: true});\n       const materialh2 = new THREE.MeshBasicMaterial({map:headtex2, depthTest: false, transparent: true});\n    \n       this.pln1 = new THREE.Mesh(geometry1,materialb1);\n       this.pln2 = new THREE.Mesh(geometry2,materialb2);\n       this.pln3 = new THREE.Mesh(geometry3,materialb3);\n       \n       this.pln4 = new THREE.Mesh(geometry4,materialh1);\n       this.pln5 = new THREE.Mesh(geometry5,materialh2);\n    \n    \n       this.pln1.position.z = -5.3;\n       this.pln2.position.z = -3.2;\n       this.pln3.position.z = -1.1;\n    \n       this.pln4.position.z = -19.2;\n       this.pln4.position.x = -59.2;\n       this.pln5.position.z = -27.1;\n       this.pln5.position.x = 65.1;\n    \n        Array(5).fill().forEach(this.addstar)\n        Array(5).fill().forEach(this.addstar2)\n        //Array(5).fill().forEach(this.addstar3)\n        //Array(5).fill().forEach(this.addstar4)\n    \n       //const trs()\n       this.scene.add(this.pln1)\n       this.scene.add(this.pln2)\n       this.scene.add(this.pln3)\n       this.scene.add(this.pln4)\n       this.scene.add(this.pln5)\n    \n      };\n    \n      addstar = () => {\n    \n        const texture = new THREE.TextureLoader().load(img1);\n    \n        const sizeRand = THREE.MathUtils.randFloatSpread(60);\n    \n        const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n        material.opacity = 0.00;\n        //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n        const geometry = new THREE.BufferGeometry();\n        //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n        //const mat = new THREE.MeshBasicMaterial({map: texture1});\n        //this.star = new THREE.Mesh(geo,mat);\n    \n        //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n    \n        const vertices = [];\n        for ( let i = 0; i < 500; i ++ ) {\n    \n          const x = Math.random() * 2000 - 1000;\n          const y = Math.random() * 2000 - 1000;\n          const z = Math.random() * 2000 - 1000;\n    \n          vertices.push( x, y, z );\n    \n        }\n    \n        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        //geometry.scale(50,50,50);\n    \n    \n    \n        //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n        this.star = new THREE.Points(geometry, material)\n    \n        //this.star.position.set(x,y,z);\n        this.scene.add(this.star)\n      };\n    \n      addstar2 = () => {\n        const texture = new THREE.TextureLoader().load(img3);\n    \n        const sizeRand = THREE.MathUtils.randFloatSpread(60);\n    \n        const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n        material.opacity = 0.00;\n        //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n        const geometry = new THREE.BufferGeometry();\n        //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n        //const mat = new THREE.MeshBasicMaterial({map: texture1});\n        //this.star = new THREE.Mesh(geo,mat);\n    \n        //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n    \n        const vertices = [];\n        for ( let i = 0; i < 500; i ++ ) {\n    \n          const x = Math.random() * 2000 - 1000;\n          const y = Math.random() * 2000 - 1000;\n          const z = Math.random() * 2000 - 1000;\n    \n          vertices.push( x, y, z );\n    \n        }\n    \n        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        //geometry.scale(50,50,50);\n    \n    \n    \n        //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n        this.star = new THREE.Points(geometry, material)\n    \n        //this.star.position.set(x,y,z);\n        this.scene.add(this.star)\n      };\n    \n      addstar3 = () => {\n        const texture = new THREE.TextureLoader().load(img4);\n    \n        const sizeRand = THREE.MathUtils.randFloatSpread(60);\n    \n        const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n        material.opacity = 0.00;\n        //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n        const geometry = new THREE.BufferGeometry();\n        //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n        //const mat = new THREE.MeshBasicMaterial({map: texture1});\n        //this.star = new THREE.Mesh(geo,mat);\n    \n        //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n    \n        const vertices = [];\n        for ( let i = 0; i < 500; i ++ ) {\n    \n          const x = Math.random() * 2000 - 250;\n          const y = Math.random() * 2000 - 250;\n          const z = Math.random() * 2000 - 250;\n    \n          vertices.push( x, y, z );\n    \n        }\n    \n        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        //geometry.scale(50,50,50);\n    \n    \n    \n        //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n        this.star = new THREE.Points(geometry, material)\n    \n        //this.star.position.set(x,y,z);\n        this.scene.add(this.star)\n      };\n    \n      addstar4 = () => {\n        const texture = new THREE.TextureLoader().load(img5);\n    \n    \n        const sizeRand = THREE.MathUtils.randFloatSpread(60);\n    \n        const material = new THREE.PointsMaterial( { size: sizeRand, map: texture, depthTest: false, transparent: true } );\n        material.opacity = 0.00;\n        //const geo = new THREE.SphereGeometry(sizeRand,24,24);\n        const geometry = new THREE.BufferGeometry();\n        //const geo = new THREE.PlaneGeometry(sizeRand,sizeRand,1,1)\n        //const mat = new THREE.MeshBasicMaterial({map: texture1});\n        //this.star = new THREE.Mesh(geo,mat);\n    \n        //const[x,y,z] = Array(3).fill().map(() => THREE.MathUtils.randFloatSpread(100));\n    \n        const vertices = [];\n        for ( let i = 0; i < 500; i ++ ) {\n    \n          const x = Math.random() * 2000 - 1000;\n          const y = Math.random() * 2000 - 1000;\n          const z = Math.random() * 2000 - 1000;\n    \n          vertices.push( x, y, z );\n    \n        }\n    \n        geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n        //geometry.scale(50,50,50);\n    \n    \n    \n        //var material1 = new THREE.PointsMaterial( { size: sizeRand, map: material, depthTest: false, transparent: true } );\n        this.star = new THREE.Points(geometry, material)\n    \n        //this.star.position.set(x,y,z);\n        this.scene.add(this.star)\n      };\n    \n    \n      // addstar = () => {\n      //   const texture1 = new THREE.TextureLoader().load(img1);\n    \n      //   const texture2 = new THREE.TextureLoader().load(img3);\n      //   const texture3 = new THREE.TextureLoader().load(img4);\n      //   const texture4 = new THREE.TextureLoader().load(img5);\n    \n      //   const sizeRand = THREE.MathUtils.randFloatSpread(50);\n    \n      //   const material = new THREE.PointsMaterial( { size: sizeRand, map: texture1, depthTest: false, transparent: true } );\n    \n      //   const geometry = new THREE.BufferGeometry();\n      //   const vertices = [];\n      //   for ( let i = 0; i < 10000; i ++ ) {\n    \n      //     const x = Math.random() * 2000 - 1000;\n      //     const y = Math.random() * 2000 - 1000;\n      //     const z = Math.random() * 2000 - 1000;\n    \n      //     vertices.push( x, y, z );\n      //   }\n    \n      //   geometry.setAttribute( 'position', new THREE.Float32BufferAttribute( vertices, 3 ) );\n    \n      //   for ( let i = 0; i < 3; i ++ )\n      //   {\n      //     var sprite;\n      //     if (i == 0)\n      //     {\n      //       sprite = texture2;\n      //     }\n      //     if (i == 1)\n      //     {\n      //       sprite = texture3;\n      //     }\n      //     if (i == 2)\n      //     {\n      //       sprite = texture4;\n      //     }\n    \n      //   }\n    \n      //   var material1 = new THREE.PointsMaterial( { size: sizeRand, map: sprite, depthTest: false, transparent: true } );\n      //   this.star = new THREE.Points(geometry, material)\n      //   this.scene.add(this.star)\n      // };\n    \n      // randMat = () => {\n    \n      // };\n    \n      startAnimationLoop = () => {\n    \n    \n    \n        const time2 = this.timeNow;\n        const time = Math.abs((Date.now() - time2) * 0.000009);\n    \n        if (time > 0.1)\n        {\n          this.pln1.position.z += 0.0125;\n          this.pln2.position.z += 0.025;\n          this.pln3.position.z += 0.05;\n          this.pln1.material.opacity -= 0.0005;\n          this.pln2.material.opacity -= 0.001;\n          this.pln3.material.opacity -= 0.0015;\n        }\n    \n    \n        //console.log(time);\n    \n    \n    \n        // this.camera.position.x += ( this.mouseX - this.camera.position.x ) * 0.05;\n            // this.camera.position.y += ( - this.mouseY - this.camera.position.y ) * 0.05;\n    \n            this.camera.lookAt( this.scene.position );\n    \n        for ( let i = 0; i < this.scene.children.length; i ++ ) {\n    \n          const object = this.scene.children[ i ];\n    \n          if ( object instanceof THREE.Points ) {\n    \n            object.rotation.y = time * ( i < 4 ? i + 1 : - ( i + 1 ) );\n    \n            if (object.material.opacity <= 0.9)\n            {\n              object.material.opacity += 0.001;\n            }\n    \n            // if (object.material.opacity >= 0.5)\n            // {\n            //   object.material.opacity -= 0.001;\n            // }\n    \n          }\n        }\n    \n        this.renderer.render(this.scene, this.camera);\n    \n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\n        // an animation and requests that the browser call a specified function\n        // to update an animation before the next repaint\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n      };\n    \n      handleWindowResize = () => {\n        var width = this.el.clientWidth;\n        var height = this.el.clientHeight;\n    \n        this.renderer.setSize(width, height);\n        this.camera.aspect = width / height;\n    \n        // Note that after making changes to most of camera properties you have to call\n        // .updateProjectionMatrix for the changes to take effect.\n        this.camera.updateProjectionMatrix();\n      };\n    \n      render() {\n        return <div style={style} ref={ref => (this.el = ref)} />;\n      }\n    }\n\nexport default ThreeTest;","import React, { Component } from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Artworks from \"./Artworks\";\nimport Contact from \"./Contact\";\nimport ThreeTest from \"./ThreeTest\";\n\nclass Letter extends React.Component {\n    render() {\n      var letterStyle = {\n          padding: 10,\n          margin: 10,\n           backgroundColor: this.props.bgcolor,\n          color: this.props.color,\n          display: \"inline-block\",\n          fontFamily: \"monospace\",\n          fontSize: 32,\n          textAlign: \"center\"\n        };\n\n      return(\n        <div style={letterStyle}>\n          {this.props.children}\n        </div>\n      );\n    }\n  }\n \nclass Main extends Component {\n  render() {\n    return (\n        <HashRouter>\n        <div>\n          <h1>\n      <Letter bgcolor=\"#805D93\" color=\"#333\">J</Letter>\n      <Letter bgcolor=\"#805D93\" color=\"#333\">A</Letter>\n      <Letter bgcolor=\"#805D93\" color=\"#333\">Y</Letter>\n      <Letter bgcolor=\"#F49FBC\" color=\"#333\">D</Letter>\n      <Letter bgcolor=\"#F49FBC\" color=\"#333\">E</Letter>\n      <Letter bgcolor=\"#F49FBC\" color=\"#333\">M</Letter>\n      <Letter bgcolor=\"#FFD3BA\" color=\"#333\">A</Letter>\n      <Letter bgcolor=\"#FFD3BA\" color=\"#333\">R</Letter>\n      <Letter bgcolor=\"#FFD3BA\" color=\"#333\">I</Letter>\n      <Letter bgcolor=\"#9EBD6E\" color=\"#333\">E</Letter>\n      <Letter bgcolor=\"#9EBD6E\" color=\"#333\">B</Letter>\n      <Letter bgcolor=\"#9EBD6E\" color=\"#333\">E</Letter>\n      <Letter bgcolor=\"#169873\" color=\"#333\">L</Letter>\n      <Letter bgcolor=\"#169873\" color=\"#333\">L</Letter>\n      <Letter bgcolor=\"#169873\" color=\"#333\">.</Letter>\n          </h1>\n          <ul className=\"header\">\n            <li><NavLink to=\"/\">Home</NavLink></li>\n            <li><NavLink to=\"/artworks\">Artworks</NavLink></li>\n            <li><NavLink to=\"/contact\">Contact</NavLink></li>\n            <li><NavLink to=\"/threetest\">ThreeTest</NavLink></li>\n          </ul>\n          <div className=\"content\">\n            <Route exact path=\"/\" component={Home}/>\n            <Route path=\"/artworks\" component={Artworks}/>\n            <Route path=\"/contact\" component={Contact}/>\n            <Route path=\"/threetest\" component={ThreeTest}/>\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n \nexport default Main;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./Main\";\nimport \"./index.css\"; \nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <Main/>, \n  document.getElementById(\"root\")\n);"],"sourceRoot":""}